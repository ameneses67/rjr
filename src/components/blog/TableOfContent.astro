---
import type { MarkdownHeading } from "astro";

interface Props {
  headings: MarkdownHeading[];
}

const { headings } = Astro.props;
---

<nav>
  <ul>
    {
      headings.map((heading) => (
        <li
          class={`border-skin-accent-shade border-l-4 py-1 transition hover:border-skin-accent hover:text-skin-base-hvr hover:underline dark:hover:text-skin-base-dark-hvr ${
            heading.depth === 3
              ? "pl-8"
              : heading.depth === 4
              ? "pl-12"
              : "pl-4"
          }`}
        >
          <a href={`#${heading.slug}`}>{heading.text}</a>
        </li>
      ))
    }
  </ul>
</nav>

<script>
  window.addEventListener("DOMContentLoaded", () => {
    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        const id = entry.target.getAttribute("id");
        if (entry.intersectionRatio > 0) {
          document
            .querySelector(`nav li a[href="#${id}"]`)
            .parentElement.classList.add(
              "bg-skin-accent-shade",
              "dark:text-skin-hdng-base",
            );
        } else {
          document
            .querySelector(`nav li a[href="#${id}"]`)
            .parentElement.classList.remove(
              "bg-skin-accent-shade",
              "dark:text-skin-hdng-base",
            );
        }
      });
    });

    // Track all sections that have an `id` applied
    document.querySelectorAll("h2[id], h3[id], h4[id]").forEach((h) => {
      observer.observe(h);
    });
  });
</script>
